(defvar *db* nil)

(defun make-bp (high low &optional (time (get-my-current-time)))
  (list :High high :Low low :Time time))

(defun add-record (bp)
  (push bp *db*))

(defun dump-db ()
  (dolist (bp *db*)
    (format t "~{~a: ~5t~a    ~}~%" bp)))

(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))

(defun prompt-for-bp ()
  (make-bp
   (parse-integer (prompt-read "High"))
   (parse-integer (prompt-read "Low"))
   (prompt-read "Time")))

(defun add-bps ()
  (loop (add-record (prompt-for-bp))
                 (if (not (y-or-n-p "Another [y/n] : ")) (return))))

;;the name of function can self-explain
(defun get-my-current-time ()
  (multiple-value-bind
       (second minute hour date month year day-of-week dst-p tz)
    (get-decoded-time)
  (format nil "~2,'0d:~2,'0d:~2,'0d ~d/~2,'0d/~d"
          hour
          minute
          second
          month
          date
          year
          )))

(defun save-db (&optional (filename "~/my_blood_pressure.db"))
  (with-open-file (out filename
                       :direction :output
                       :if-exists :supersede)
    (with-standard-io-syntax
        (print *db* out))))

(defun load-db (&optional (filename "~/my_blood_pressure.db"))
  (with-open-file (in filename)
    (with-standard-io-syntax
      (setf *db* (read in)))))
