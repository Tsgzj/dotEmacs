(defun hello-world ()
  (format t "hello world"))

(defun hello-emacs ()
  (format t "你好！emacs"))

(defun make-cd (title artist rating ripped)
 (list :title title :artist artist :rating rating :ripped ripped))

(defvar *db* nil)

(defun add-record (cd) (push cd *db*))

(defun dump-db ()
  (dolist (cd *db*)
    (format t "~{~a: ~10t~a~%~}~%" cd)))

;;(defun dump-db2 ()
;;  (format t "~{~a: ~10t~a~%~}~%" *db*)

(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))

(defun prompt-for-cd ()
  (make-cd
   (prompt-read "Title")
   (prompt-read "Artist")
   (or (parse-integer (prompt-read "Rating") :junk-allowed t) )
   (y-or-n-p "Ripped [y/n]")))

(defun add-cds ()
  (loop (add-record (prompt-for-cd))
     (if (not (y-or-n-p "Anothor? [y/n]: "))
         (return))))

(defun save-db (filename)
  (with-open-file (out filename
                       :direction :output
                       :exists :supersede
                       :external-format :utf-8)
    (with-standard-io-syntax
      (print *db* out))))

(defun load-db (filename)
  (with-open-file (in filename
                      :external-format :utf-8)
    (with-standard-io-syntax
      (setf *db* (read in)))))

;;(defun )
(defun verbose-sum (x y)
  "Sum any two numbers"
  (format t "Summing ~d and ~d.~%" x y)
  (+ x y))

(defun verbose-sum2 (x y)
  "Sum any two numbers"
  (format t "Summing ~d and ~d is ~d~%" x y (+ 2 3)))

(let ((x 10))  (format t "~d " x))

(defun foo-25(x)
  (format t "Parameter: ~a~%" x)
  (let ((x 2))
    (format t "Outer Let: ~a~%" x)
    (let ((x 3))
      (format t "Inner Let: ~a~%" x))
    (format t "Outer Let：~a~%" x))
  (format t "Parameter: ~a~%" x))  

(defun timestable ()
    (dotimes (x 20)
      (dotimes (y 20)
        (format t " ~3d" (* (+ 1 x) (+ 1 y))) (if (< x y) (return)))
      (format t "~%")))

(defun fib (x)
  (do ((n 0 (1+ n))
       (cur 0 next)
       (next 1 (+ cur next)))
      ((= x n) cur)))

(defun my-fib (x)
  (loop for i below x
       and a = 0 then b
       and b = 1 then (+ b a)
       finally (return a)))

(defmacro with-gemsyms ((&rest names) &body body)
  `(let ,(loop for n in names collect `(,n (gemsym)))
     ,@body))

(defvar *test-name* nil)

(defmacro deftest (name parameters &body body)
  `(defun ,name ,parameters
     (let ((*test-name* (append *test-name* (list `,name))))
       ，@body)))

(defmacro check (&body forms)
  `(combine-results
    ,@(loop for f in forms collect `(report-result ,f `,f))))

(defmacro combine-results (&body forms)
  (with-gemsyms (result)
    `(let ((,result t))
       ,@(loop for f in forms collect `(unless ,f (setf ,result nil)))
       ,result)))

(defun report-result (result form)
  (format t "~:[FAIL~;PASS~] ... ~a: ~a~%" result *test-name* form)
  result)

(defun my-fib-2 (n)
  "Simple recursive Fibonacci number function"
  (if (< n 2)
    n
    (+ (fib (- n 1)) (fib (- n 2)))))
