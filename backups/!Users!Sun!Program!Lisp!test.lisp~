(defun hello-world ()
  (format t "hello world"))

(defun hello-emacs ()
  (format t "你好！emacs"))

(defun make-cd (title artist rating ripped)
 (list :title title :artist artist :rating rating :ripped ripped))

(defvar *db* nil)

(defun add-record (cd) (push cd *db*))

(defun dump-db ()
  (dolist (cd *db*)
    (format t "~{~a: ~10t~a~%~}~%" cd)))

;;(defun dump-db2 ()
;;  (format t "~{~a: ~10t~a~%~}~%" *db*)

(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))

(defun prompt-for-cd ()
  (make-cd
   (prompt-read "Title")
   (prompt-read "Artist")
   (or (parse-integer (prompt-read "Rating") :junk-allowed t) )
   (y-or-n-p "Ripped [y/n]")))

(defun add-cds ()
  (loop (add-record (prompt-for-cd))
     (if (not (y-or-n-p "Anothor? [y/n]: "))
         (return))))

(defun save-db (filename)
  (with-open-file (out filename
                       :direction :output
                       :exists :supersede
                       :external-format :utf-8)
    (with-standard-io-syntax
      (print *db* out))))

(defun load-db (filename)
  (with-open-file (in filename
                      :external-format :utf-8)
    (with-standard-io-syntax
      (setf *db* (read in)))))

;;(defun )
(defun verbose-sum (x y)
)
